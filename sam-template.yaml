Transform: AWS::Serverless-2016-10-31
Description: Serverless Express Application/API powered by API Gateway and Lambda
Parameters:
  DomainName:
    Type: String
    Description: CDN Domain name
    Default: ''

  BranchHash:
    Type: String
    Description: Hash of the branch name (CNAME of the Domain)
    Default: ''

  Route53HostedZone:
    Type: String
    Description: Hosted Zone
    Default: ''

  CertARN:
    Type: String
    Description: DNS Certificate ARN
    Default: ''

  S3BucketDomain:
    Type: String
    Description: Static S3 Bucket Origin
    Default: ''

  SiteUsername:
    Type: String
    Description: The username for the branch
    Default: ''

  SitePassword:
    Type: String
    Description: The password for the branch
    Default: ''

  AuthEnabled:
    Type: String
    Description: True if password protection is turned on for the branch
    AllowedValues:
      - 'true'
      - 'false'

  ProvisionedConcurrencyEnabled:
    Type: String
    Description: True if we want the lambda to turn on provisioned currency by default (Increased AWS Costs)
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'

  KillSwitch:
    Type: String
    Description: The killswitch boolean used to redirect to the base website
    AllowedValues:
      - 'true'
      - 'false'

  RedirectedUrl:
    Type: String
    Description: The URL redirected to after killswitch is enabled
    Default: ''

  CacheBypassPassword:
    Type: String
    Description: The Password to bypass the cache
    Default: ''

Conditions:
  IsAuthEnabled: !Equals [ !Ref AuthEnabled, 'true']
  KillSwitchEnabled: !Equals [ !Ref KillSwitch, 'true']
  IsProvisionedConcurrencyEnabled: !Equals [ !Ref ProvisionedConcurrencyEnabled, 'true']

Resources:
  ExpressApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      BinaryMediaTypes: ['*/*']
      MinimumCompressionSize: 0

  ExpressLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: server/edge.handler
      MemorySize: 2048
      ProvisionedConcurrencyConfig:
        !If
          - IsProvisionedConcurrencyEnabled
          - ProvisionedConcurrentExecutions: 30
          - !Ref "AWS::NoValue"
      AutoPublishAlias: prod
      Tracing: Active
      Runtime: nodejs14.x
      Timeout: 30
      Policies:
        - AWSLambdaExecute
      Environment:
        Variables:
          CACHE_BYPASS:
            !Ref CacheBypassPassword
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ExpressApi
            Path: /
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ExpressApi
            Path: /{proxy+}
            Method: ANY

  IPXExpressApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      BinaryMediaTypes: ['*/*']
      MinimumCompressionSize: 0
      Name: !Sub "${AWS::StackName}-IPX"

  IPXExpressLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: server/edge.handler
      MemorySize: 2048
      ProvisionedConcurrencyConfig:
        !If
          - IsProvisionedConcurrencyEnabled
          - ProvisionedConcurrentExecutions: 30
          - !Ref "AWS::NoValue"
      AutoPublishAlias: prod
      Tracing: Active
      Runtime: nodejs14.x
      Timeout: 30
      Policies:
        - AWSLambdaExecute
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref IPXExpressApi
            Path: /
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref IPXExpressApi
            Path: /{proxy+}
            Method: ANY

  SocialLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: sociallogin
      Handler: app.handle
      MemorySize: 1024
      Runtime: python3.7
      Timeout: 30
      Policies:
        - AWSLambdaExecute
      Events:
        SocialLoginProxyResource:
          Type: Api
          Properties:
            RestApiId: !Ref ExpressApi
            Path: /social-login
            RequestParameters:
              method.request.querystring.returnPath: false
            Method: POST
        SocialLoginProxyResourceGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ExpressApi
            Path: /social-login/{proxy+}
            RequestParameters:
              method.request.querystring.returnPath: false
            Method: POST

  DefaultCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 1
        MaxTTL: 31556952
        MinTTL: 0
        Name: !Sub 'DefaultCachePolicy-${AWS::StackName}'
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: whitelist
            Cookies:
              - en_currency_V6
              - en_shippingCountry_V6
              - locale_V6
              - cache_bypass_id
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - cache-bypass
          QueryStringsConfig:
            QueryStringBehavior: 'all'

  DefaultOriginRequestPolicy:
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties:
      OriginRequestPolicyConfig:
        Name: !Sub 'DefaultOriginRequestPolicy-${AWS::StackName}'
        CookiesConfig:
          CookieBehavior: all
        HeadersConfig:
          HeaderBehavior: 'none'
        QueryStringsConfig:
          QueryStringBehavior: 'all'

  BFFCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 1
        MaxTTL: 31556952
        MinTTL: 0
        Name: !Sub 'BFFCachePolicy-${AWS::StackName}'
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: 'all'
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: 'whitelist'
            Headers:
            - Authorization
          QueryStringsConfig:
            QueryStringBehavior: 'whitelist'
            QueryStrings:
              - 'returnPath'

  ManifestFunction:
    Type: AWS::CloudFront::Function
    Properties:
      AutoPublish: True
      FunctionCode: !Sub |
        function handler(event) {
            var request = event.request;
            var uri = request.uri;
            request.uri = '/_nuxt/static/_/manifest.js'
            return request;
        }
      FunctionConfig:
        Comment: !Sub "Manifest path creation for ${BranchHash}"
        Runtime: cloudfront-js-1.0
      Name: !Sub "${AWS::StackName}-Manifest"

  KillSwitchFunction:
    Type: AWS::CloudFront::Function
    Properties:
      AutoPublish: True
      FunctionCode: !Sub |
        var response = {
            statusCode: 302,
            statusDescription: 'Found',
            headers: {
              "location": { "value": '${RedirectedUrl}'
            }
          }
        };

        function handler(event) {
          return response;
        }
      FunctionConfig:
        Comment: !Sub "Redirect for ${BranchHash}"
        Runtime: cloudfront-js-1.0
      Name: !Sub "${AWS::StackName}-Redirect"

  AuthFunction:
    Type: AWS::CloudFront::Function
    Properties:
      AutoPublish: True
      FunctionCode: !Sub |

        var user = '${SiteUsername}';
        var pass = '${SitePassword}';
        var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

        var response401 = {
            statusCode: 401,
            statusDescription: 'Unauthorized',
            headers: {
                'www-authenticate': {
                    value: 'Basic'
                },
            },
        };

        function btoa(input) {
            input = String(input);
            var bitmap, a, b, c,
                result = "",
                i = 0,
                rest = input.length % 3; // To determine the final padding

            for (; i < input.length;) {
                if ((a = input.charCodeAt(i++)) > 255 ||
                    (b = input.charCodeAt(i++)) > 255 ||
                    (c = input.charCodeAt(i++)) > 255)
                    throw new TypeError("Failed to execute 'btoa' on 'Window': The string to be encoded contains characters outside of the Latin1 range.");

                bitmap = (a << 16) | (b << 8) | c;
                result += b64.charAt(bitmap >> 18 & 63) + b64.charAt(bitmap >> 12 & 63) +
                    b64.charAt(bitmap >> 6 & 63) + b64.charAt(bitmap & 63);
            }

            // If there's need of padding, replace the last 'A's with equal signs
            return rest ? result.slice(0, rest - 3) + "===".substring(rest) : result;
        }


        function handler(event) {
            var request = event.request;
            var headers = request.headers;

            var auth = request.headers.authorization && request.headers.authorization.value;


            if (!auth || !auth.startsWith('Basic ')) {
                return response401;
            }

            // Construct the Basic Auth string
            var authString = 'Basic ' + btoa(user + ':' + pass);

            if (!(authString === auth)) {
                return response401;
            }


            return request;
        }


      FunctionConfig:
        Comment: !Sub "Auth for ${BranchHash}"
        Runtime: cloudfront-js-1.0
      Name: !Sub "${AWS::StackName}-Auth"

  Cloudfront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub ${DomainName} Distribution
        CustomErrorResponses:
        -   ErrorCachingMinTTL: 1
            ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /404.html
        Origins:
        - DomainName: !Sub ${ExpressApi}.execute-api.${AWS::Region}.amazonaws.com
          Id: LambdaOrigin
          OriginPath: /prod
          CustomOriginConfig:
            HTTPSPort: '443'
            OriginProtocolPolicy: https-only
        - DomainName: horizon-api.www.coggles.com
          Id: HorizonOrigin
          CustomOriginConfig:
            HTTPSPort: '443'
            OriginProtocolPolicy: https-only
        - DomainName: !Ref S3BucketDomain
          Id: S3StaticOrigin
          OriginPath: !Sub /${BranchHash}
          CustomOriginConfig:
            HTTPSPort: '443'
            OriginProtocolPolicy: https-only
        - DomainName: !Sub ${IPXExpressApi}.execute-api.${AWS::Region}.amazonaws.com
          Id: IPXExpressLambdaOrigin
          OriginPath: /prod
          CustomOriginConfig:
            HTTPSPort: '443'
            OriginProtocolPolicy: https-only
        Enabled: true
        HttpVersion: 'http2'
        Aliases:
          -  !Ref DomainName
        CacheBehaviors:
          - AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
            - POST
            - PUT
            - DELETE
            - PATCH
            PathPattern: "/graphql*"
            Compress: true
            TargetOriginId: HorizonOrigin
            CachePolicyId: !Ref DefaultCachePolicy
            OriginRequestPolicyId: !Ref DefaultOriginRequestPolicy
            FunctionAssociations:
              - !If
                - KillSwitchEnabled
                - EventType: viewer-request
                  FunctionARN: !GetAtt KillSwitchFunction.FunctionMetadata.FunctionARN
                - !Ref "AWS::NoValue"
            ViewerProtocolPolicy: redirect-to-https
          - AllowedMethods:
              - HEAD
              - GET
              - OPTIONS
            PathPattern: "/*manifest.js"
            Compress: true
            TargetOriginId: S3StaticOrigin
            CachePolicyId: !Ref DefaultCachePolicy
            FunctionAssociations:
              - EventType: viewer-request
                FunctionARN: !GetAtt ManifestFunction.FunctionMetadata.FunctionARN
            ViewerProtocolPolicy: redirect-to-https
          - AllowedMethods:
              - HEAD
              - GET
              - OPTIONS
            PathPattern: "/*.js"
            Compress: true
            TargetOriginId: S3StaticOrigin
            CachePolicyId: !Ref DefaultCachePolicy
            FunctionAssociations:
              - !If
                - KillSwitchEnabled
                - EventType: viewer-request
                  FunctionARN: !GetAtt KillSwitchFunction.FunctionMetadata.FunctionARN
                - !Ref "AWS::NoValue"
            ViewerProtocolPolicy: redirect-to-https
          - AllowedMethods:
              - HEAD
              - GET
              - OPTIONS
            PathPattern: "/*.json"
            Compress: true
            TargetOriginId: S3StaticOrigin
            CachePolicyId: !Ref DefaultCachePolicy
            FunctionAssociations:
              - !If
                - KillSwitchEnabled
                - EventType: viewer-request
                  FunctionARN: !GetAtt KillSwitchFunction.FunctionMetadata.FunctionARN
                - !Ref "AWS::NoValue"
            ViewerProtocolPolicy: redirect-to-https
          - AllowedMethods:
              - HEAD
              - GET
              - OPTIONS
            PathPattern: "/*.ico"
            Compress: true
            TargetOriginId: S3StaticOrigin
            CachePolicyId: !Ref DefaultCachePolicy
            ViewerProtocolPolicy: redirect-to-https
          - AllowedMethods:
              - HEAD
              - GET
              - OPTIONS
            PathPattern: "/flags*"
            Compress: true
            TargetOriginId: S3StaticOrigin
            CachePolicyId: !Ref DefaultCachePolicy
            ViewerProtocolPolicy: redirect-to-https
          - AllowedMethods:
              - HEAD
              - GET
              - OPTIONS
            Compress: true
            TargetOriginId: S3StaticOrigin
            CachePolicyId: !Ref DefaultCachePolicy
            ViewerProtocolPolicy: redirect-to-https
            PathPattern: "/*.txt"
          - AllowedMethods:
              - HEAD
              - GET
              - OPTIONS
              - POST
              - PUT
              - DELETE
              - PATCH
            PathPattern: "/social-login*"
            Compress: true
            TargetOriginId: LambdaOrigin
            CachePolicyId: !Ref BFFCachePolicy
            ViewerProtocolPolicy: redirect-to-https
          - AllowedMethods:
              - HEAD
              - GET
              - OPTIONS
            PathPattern: "/api/nav*"
            Compress: true
            TargetOriginId: LambdaOrigin
            CachePolicyId: !Ref DefaultCachePolicy
            OriginRequestPolicyId: !Ref DefaultOriginRequestPolicy
            ViewerProtocolPolicy: redirect-to-https
            FunctionAssociations:
              - !If
                - KillSwitchEnabled
                - EventType: viewer-request
                  FunctionARN: !GetAtt KillSwitchFunction.FunctionMetadata.FunctionARN
                - !Ref "AWS::NoValue"
          - AllowedMethods:
              - HEAD
              - GET
              - OPTIONS
            PathPattern: "/_ipx/*"
            Compress: true
            TargetOriginId: IPXExpressLambdaOrigin
            CachePolicyId: !Ref DefaultCachePolicy
            OriginRequestPolicyId: !Ref DefaultOriginRequestPolicy
            ViewerProtocolPolicy: redirect-to-https
            FunctionAssociations:
              - !If
                - KillSwitchEnabled
                - EventType: viewer-request
                  FunctionARN: !GetAtt KillSwitchFunction.FunctionMetadata.FunctionARN
                - !If
                  - IsAuthEnabled
                  - EventType: viewer-request
                    FunctionARN: !GetAtt AuthFunction.FunctionMetadata.FunctionARN
                  - !Ref "AWS::NoValue"
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
            - POST
            - PUT
            - DELETE
            - PATCH
          Compress: true
          TargetOriginId: LambdaOrigin
          DefaultTTL: 0
          CachePolicyId: !Ref DefaultCachePolicy
          OriginRequestPolicyId: !Ref DefaultOriginRequestPolicy
          ViewerProtocolPolicy: redirect-to-https
          FunctionAssociations:
            - !If
              - KillSwitchEnabled
              - EventType: viewer-request
                FunctionARN: !GetAtt KillSwitchFunction.FunctionMetadata.FunctionARN
              - !If
                - IsAuthEnabled
                - EventType: viewer-request
                  FunctionARN: !GetAtt AuthFunction.FunctionMetadata.FunctionARN
                - !Ref "AWS::NoValue"
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref CertARN
          SslSupportMethod: sni-only

  CFDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref Route53HostedZone
      Comment: Zone apex alias.
      RecordSets:
      -
        Name: !Ref DomainName
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2
          DNSName: !GetAtt Cloudfront.DomainName

  MonitoringUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
        - PolicyName: CloudWatchUserAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:ListMetrics'
                  - 'cloudwatch:GetMetricData'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'logs:DescribeLogGroups'
                  - 'logs:GetLogGroupFields'
                  - 'logs:StartQuery'
                  - 'logs:StopQuery'
                  - 'logs:GetQueryResults'
                  - 'logs:GetLogEvents'
                  - 'sts:AssumeRole'
                  - 'cloudfront:GetDistribution'
                  - 'cloudfront:ListDistributions'
                Resource:
                  - '*'

Outputs:
  CDNURL:
    Description: "The Url for the CDN"
    Value: !If [IsAuthEnabled, !Sub 'https://${SiteUsername}:${SitePassword}@${DomainName}/', !Sub 'https://${DomainName}/']

  DistributionId:
    Description: "The distribution id for ${EnvironmentName}"
    Value:  !Ref Cloudfront

  LambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${ExpressLambdaFunction}

  ApiGatewayApiConsoleUrl:
    Description: Console URL for the API Gateway API's Stage.
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/apigateway/home?region=${AWS::Region}#/apis/${ExpressApi}/stages/prod

  ApiUrl:
    Description: Invoke URL for your API. Clicking this link will perform a GET request
      on the root resource of your API.
    Value: !Sub https://${ExpressApi}.execute-api.${AWS::Region}.amazonaws.com/prod/

  Username:
    Description: The username for the branch
    Condition: IsAuthEnabled
    Value: !Ref SiteUsername

  Password:
    Description: The password for the branch
    Condition: IsAuthEnabled
    Value: !Ref SitePassword

  AuthStatus:
    Description: Whether auth is enabled, it will either be 'true' or 'false'
    Value: !Ref AuthEnabled

  LambdaFunctionName:
    Description: Name of the Serverless Express Lambda Function
    Value: !Ref ExpressLambdaFunction

  MonitoringUserARN:
    Description: The IAM user with permissions for monitoring
    Value: !GetAtt MonitoringUser.Arn
